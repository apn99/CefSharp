Index: patch/patches/151_jstask_fix.patch
===================================================================
--- patch/patches/151_jstask_fix.patch	(revision 0)
+++ patch/patches/151_jstask_fix.patch	(revision 0)
@@ -0,0 +1,13 @@
+Index: WebKit/WebCore/bindings/v8/ScriptController.cpp
+===================================================================
+--- WebKit/WebCore/bindings/v8/ScriptController.cpp	(revision 74182)
++++ WebKit/WebCore/bindings/v8/ScriptController.cpp	(working copy)
+@@ -257,7 +257,7 @@
+ 
+     m_sourceURL = savedSourceURL;
+ 
+-    if (object.IsEmpty() || object->IsUndefined())
++    if (object.IsEmpty())
+         return ScriptValue();
+ 
+     return ScriptValue(object);
Index: patch/patch_source.cfg
===================================================================
--- patch/patch_source.cfg	(revision 181)
+++ patch/patch_source.cfg	(working copy)
@@ -3,4 +3,6 @@
 # file entry should be proceeded by the code review or bug report link that it
 # relates to.
 patches = {
+  # https://bugs.webkit.org/show_bug.cgi?id=51528
+  '151_jstask_fix' : '../third_party/'
 }
Index: libcef_dll/cpptoc/v8task_cpptoc.h
===================================================================
--- libcef_dll/cpptoc/v8task_cpptoc.h	(revision 0)
+++ libcef_dll/cpptoc/v8task_cpptoc.h	(revision 0)
@@ -0,0 +1,34 @@
+// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool and should not edited
+// by hand. See the translator.README.txt file in the tools directory for
+// more information.
+//
+#ifndef _V8TASK_CPPTOC_H
+#define _V8TASK_CPPTOC_H
+
+#ifndef USING_CEF_SHARED
+#pragma message("Warning: "__FILE__" may be accessed wrapper-side only")
+#else // USING_CEF_SHARED
+
+#include "include/cef.h"
+#include "include/cef_capi.h"
+#include "libcef_dll/cpptoc/cpptoc.h"
+
+// Wrap a C++ class with a C structure.
+// This class may be instantiated and accessed wrapper-side only.
+class CefV8TaskCppToC
+    : public CefCppToC<CefV8TaskCppToC, CefV8Task, cef_v8task_t>
+{
+public:
+  CefV8TaskCppToC(CefV8Task* cls);
+  virtual ~CefV8TaskCppToC() {}
+};
+
+#endif // USING_CEF_SHARED
+#endif // _V8TASK_CPPTOC_H
+
Index: libcef_dll/cpptoc/frame_cpptoc.cc
===================================================================
--- libcef_dll/cpptoc/frame_cpptoc.cc	(revision 181)
+++ libcef_dll/cpptoc/frame_cpptoc.cc	(working copy)
@@ -13,6 +13,7 @@
 #include "libcef_dll/cpptoc/frame_cpptoc.h"
 #include "libcef_dll/cpptoc/request_cpptoc.h"
 #include "libcef_dll/cpptoc/stream_reader_cpptoc.h"
+#include "libcef_dll/ctocpp/v8task_ctocpp.h"
 
 
 // MEMBER FUNCTIONS - Body may be edited by hand.
@@ -173,6 +174,17 @@
       CefString(scriptUrl), startLine);
 }
 
+void CEF_CALLBACK frame_execute_java_script_task(struct _cef_frame_t* self,
+    cef_v8task_t* jsTask)
+{
+  DCHECK(self);
+  DCHECK(jsTask);
+  if(!self || !jsTask)
+    return;
+
+  CefFrameCppToC::Get(self)->ExecuteJavaScriptTask(CefV8TaskCToCpp::Wrap(jsTask));
+}
+
 int CEF_CALLBACK frame_is_main(struct _cef_frame_t* self)
 {
   DCHECK(self);
@@ -233,6 +245,7 @@
   struct_.struct_.load_string = frame_load_string;
   struct_.struct_.load_stream = frame_load_stream;
   struct_.struct_.execute_java_script = frame_execute_java_script;
+  struct_.struct_.execute_java_script_task = frame_execute_java_script_task;
   struct_.struct_.is_main = frame_is_main;
   struct_.struct_.is_focused = frame_is_focused;
   struct_.struct_.get_name = frame_get_name;
Index: libcef_dll/cpptoc/v8task_cpptoc.cc
===================================================================
--- libcef_dll/cpptoc/v8task_cpptoc.cc	(revision 0)
+++ libcef_dll/cpptoc/v8task_cpptoc.cc	(revision 0)
@@ -0,0 +1,85 @@
+// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// A portion of this file was generated by the CEF translator tool.  When
+// making changes by hand only do so within the body of existing function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+
+#include "libcef_dll/cpptoc/v8task_cpptoc.h"
+#include "libcef_dll/ctocpp/v8value_ctocpp.h"
+
+
+// MEMBER FUNCTIONS - Body may be edited by hand.
+
+cef_string_userfree_t CEF_CALLBACK v8task_get_script(struct _cef_v8task_t* self)
+{
+  DCHECK(self);
+  if(!self)
+    return 0;
+
+  CefString valueStr = CefV8TaskCppToC::Get(self)->GetScript();
+  return valueStr.DetachToUserFree();
+}
+
+cef_string_userfree_t CEF_CALLBACK v8task_get_script_name(
+    struct _cef_v8task_t* self)
+{
+  DCHECK(self);
+  if(!self)
+    return 0;
+
+  CefString valueStr = CefV8TaskCppToC::Get(self)->GetScriptName();
+  return valueStr.DetachToUserFree();
+}
+
+int CEF_CALLBACK v8task_get_start_line(struct _cef_v8task_t* self)
+{
+  DCHECK(self);
+  if(!self)
+    return 0;
+
+  return CefV8TaskCppToC::Get(self)->GetStartLine();
+}
+
+void CEF_CALLBACK v8task_handle_success(struct _cef_v8task_t* self,
+    struct _cef_v8value_t* result)
+{
+  DCHECK(self);
+  if(!self)
+    return;
+
+  CefV8TaskCppToC::Get(self)->HandleSuccess(CefV8ValueCToCpp::Wrap(result));
+}
+
+void CEF_CALLBACK v8task_handle_error(struct _cef_v8task_t* self)
+{
+  DCHECK(self);
+  if(!self)
+    return;
+
+  CefV8TaskCppToC::Get(self)->HandleError();
+}
+
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefV8TaskCppToC::CefV8TaskCppToC(CefV8Task* cls)
+    : CefCppToC<CefV8TaskCppToC, CefV8Task, cef_v8task_t>(cls)
+{
+  struct_.struct_.get_script = v8task_get_script;
+  struct_.struct_.get_script_name = v8task_get_script_name;
+  struct_.struct_.get_start_line = v8task_get_start_line;
+  struct_.struct_.handle_success = v8task_handle_success;
+  struct_.struct_.handle_error = v8task_handle_error;
+}
+
+#ifdef _DEBUG
+template<> long CefCppToC<CefV8TaskCppToC, CefV8Task,
+    cef_v8task_t>::DebugObjCt = 0;
+#endif
+
Index: libcef_dll/ctocpp/frame_ctocpp.h
===================================================================
--- libcef_dll/ctocpp/frame_ctocpp.h	(revision 181)
+++ libcef_dll/ctocpp/frame_ctocpp.h	(working copy)
@@ -49,6 +49,7 @@
       const CefString& url);
   virtual void ExecuteJavaScript(const CefString& jsCode,
       const CefString& scriptUrl, int startLine);
+  virtual void ExecuteJavaScriptTask(CefRefPtr<CefV8Task> jsTask);
   virtual bool IsMain();
   virtual bool IsFocused();
   virtual CefString GetName();
Index: libcef_dll/ctocpp/v8task_ctocpp.h
===================================================================
--- libcef_dll/ctocpp/v8task_ctocpp.h	(revision 0)
+++ libcef_dll/ctocpp/v8task_ctocpp.h	(revision 0)
@@ -0,0 +1,43 @@
+// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// -------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool and should not edited
+// by hand. See the translator.README.txt file in the tools directory for
+// more information.
+//
+
+#ifndef _V8TASK_CTOCPP_H
+#define _V8TASK_CTOCPP_H
+
+#ifndef BUILDING_CEF_SHARED
+#pragma message("Warning: "__FILE__" may be accessed DLL-side only")
+#else // BUILDING_CEF_SHARED
+
+#include "include/cef.h"
+#include "include/cef_capi.h"
+#include "libcef_dll/ctocpp/ctocpp.h"
+
+// Wrap a C structure with a C++ class.
+// This class may be instantiated and accessed DLL-side only.
+class CefV8TaskCToCpp
+    : public CefCToCpp<CefV8TaskCToCpp, CefV8Task, cef_v8task_t>
+{
+public:
+  CefV8TaskCToCpp(cef_v8task_t* str)
+      : CefCToCpp<CefV8TaskCToCpp, CefV8Task, cef_v8task_t>(str) {}
+  virtual ~CefV8TaskCToCpp() {}
+
+  // CefV8Task methods
+  virtual CefString GetScript();
+  virtual CefString GetScriptName();
+  virtual int GetStartLine();
+  virtual void HandleSuccess(CefRefPtr<CefV8Value> result);
+  virtual void HandleError();
+};
+
+#endif // BUILDING_CEF_SHARED
+#endif // _V8TASK_CTOCPP_H
+
Index: libcef_dll/ctocpp/frame_ctocpp.cc
===================================================================
--- libcef_dll/ctocpp/frame_ctocpp.cc	(revision 181)
+++ libcef_dll/ctocpp/frame_ctocpp.cc	(working copy)
@@ -10,6 +10,7 @@
 // tools directory for more information.
 //
 
+#include "libcef_dll/cpptoc/v8task_cpptoc.h"
 #include "libcef_dll/ctocpp/frame_ctocpp.h"
 #include "libcef_dll/ctocpp/request_ctocpp.h"
 #include "libcef_dll/ctocpp/stream_reader_ctocpp.h"
@@ -155,6 +156,14 @@
       scriptUrl.GetStruct(), startLine);
 }
 
+void CefFrameCToCpp::ExecuteJavaScriptTask(CefRefPtr<CefV8Task> jsTask)
+{
+  if(CEF_MEMBER_MISSING(struct_, execute_java_script_task))
+    return;
+
+  struct_->execute_java_script_task(struct_, CefV8TaskCppToC::Wrap(jsTask));
+}
+
 bool CefFrameCToCpp::IsMain()
 {
   if(CEF_MEMBER_MISSING(struct_, is_main))
Index: libcef_dll/ctocpp/v8task_ctocpp.cc
===================================================================
--- libcef_dll/ctocpp/v8task_ctocpp.cc	(revision 0)
+++ libcef_dll/ctocpp/v8task_ctocpp.cc	(revision 0)
@@ -0,0 +1,71 @@
+// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// A portion of this file was generated by the CEF translator tool.  When
+// making changes by hand only do so within the body of existing static and
+// virtual method implementations. See the translator.README.txt file in the
+// tools directory for more information.
+//
+
+#include "libcef_dll/cpptoc/v8value_cpptoc.h"
+#include "libcef_dll/ctocpp/v8task_ctocpp.h"
+
+
+// VIRTUAL METHODS - Body may be edited by hand.
+
+CefString CefV8TaskCToCpp::GetScript()
+{
+  CefString str;
+  if(CEF_MEMBER_MISSING(struct_, get_script))
+    return str;
+
+  cef_string_userfree_t strPtr = struct_->get_script(struct_);
+  str.AttachToUserFree(strPtr);
+  return str;
+}
+
+CefString CefV8TaskCToCpp::GetScriptName()
+{
+  CefString str;
+  if(CEF_MEMBER_MISSING(struct_, get_script_name))
+    return str;
+
+  cef_string_userfree_t strPtr = struct_->get_script_name(struct_);
+  str.AttachToUserFree(strPtr);
+  return str;
+}
+
+int CefV8TaskCToCpp::GetStartLine()
+{
+  if(CEF_MEMBER_MISSING(struct_, get_start_line))
+    return 1;
+
+  return struct_->get_start_line(struct_);
+}
+
+void CefV8TaskCToCpp::HandleSuccess(CefRefPtr<CefV8Value> result)
+{
+  if(CEF_MEMBER_MISSING(struct_, handle_success))
+    return;
+
+  cef_v8value_t* resPtr = CefV8ValueCppToC::Wrap(result);
+  struct_->handle_success(struct_, resPtr);
+}
+
+void CefV8TaskCToCpp::HandleError()
+{
+  if(CEF_MEMBER_MISSING(struct_, handle_error))
+    return;
+
+  struct_->handle_error(struct_);
+}
+
+
+#ifdef _DEBUG
+template<> long CefCToCpp<CefV8TaskCToCpp, CefV8Task,
+    cef_v8task_t>::DebugObjCt = 0;
+#endif
+
Index: include/cef_capi.h
===================================================================
--- include/cef_capi.h	(revision 181)
+++ include/cef_capi.h	(working copy)
@@ -184,6 +184,34 @@
 #define CEF_MEMBER_EXISTS(s, f)   \
   ((int)&((s)->f) - (int)(s) + sizeof((s)->f) <= (s)->base.size)
 
+// Implement this structure for V8 javascript task execution.
+typedef struct _cef_v8task_t
+{
+  // Base structure.
+  cef_base_t base;
+
+  // Script that will be executed.
+  // The resulting string must be freed by calling cef_string_userfree_free().
+  cef_string_userfree_t (CEF_CALLBACK *get_script)(struct _cef_v8task_t* self);
+
+  // name/url of the script for error reporting purposes
+  // The resulting string must be freed by calling cef_string_userfree_free().
+  cef_string_userfree_t (CEF_CALLBACK *get_script_name)(
+      struct _cef_v8task_t* self);
+
+  // starting line number of the script for error reporting purposes
+  int (CEF_CALLBACK *get_start_line)(struct _cef_v8task_t* self);
+
+  // executed on successful completion of the script
+  void (CEF_CALLBACK *handle_success)(struct _cef_v8task_t* self,
+      struct _cef_v8value_t* result);
+
+  // executed on successful completion of the script
+  void (CEF_CALLBACK *handle_error)(struct _cef_v8task_t* self);
+
+} cef_v8task_t;
+
+
 #define CEF_MEMBER_MISSING(s, f)  (!CEF_MEMBER_EXISTS(s, f) || !((s)->f))
 
 
@@ -379,6 +407,10 @@
       const cef_string_t* jsCode, const cef_string_t* scriptUrl,
       int startLine);
 
+  // Execute the cef_v8task_t code in this frame.
+  void (CEF_CALLBACK *execute_java_script_task)(struct _cef_frame_t* self,
+      struct _cef_v8task_t* jsTask);
+
   // Returns true (1) if this is the main frame.
   int (CEF_CALLBACK *is_main)(struct _cef_frame_t* self);
 
Index: include/cef.h
===================================================================
--- include/cef.h	(revision 181)
+++ include/cef.h	(working copy)
@@ -62,6 +62,7 @@
 class CefURLParts;
 class CefV8Handler;
 class CefV8Value;
+class CefV8Task;
 
 
 // This function should be called on the main application thread to initialize
@@ -341,7 +342,29 @@
 {
   return a.x == b.x && a.y == b.y && a.width == b.width && a.height == b.height;
 }
+// Implement this interface for V8 javascript task execution.
+/*--cef(source=client)--*/
+class CefV8Task : public CefBase
+{
+public:
+    // Script that will be executed.
+    /*--cef()--*/
+    virtual CefString GetScript() =0;
+    // name/url of the script for error reporting purposes
+    /*--cef()--*/
+    virtual CefString GetScriptName() =0;
+    // starting line number of the script for error reporting purposes
+    /*--cef()--*/
+    virtual int GetStartLine() =0;
+    // executed on successful completion of the script
+    /*--cef()--*/
+    virtual void HandleSuccess(CefRefPtr<CefV8Value> result) =0;
+    // executed if script execution fails to compile or throws an uncaught exception
+    /*--cef()--*/
+    virtual void HandleError() =0;
+};
 
+
 inline bool operator!=(const CefRect& a, const CefRect& b)
 {
   return !(a == b);
@@ -549,6 +572,10 @@
                                  const CefString& scriptUrl,
                                  int startLine) =0;
 
+  // Execute the CefV8Task code in this frame. 
+  /*--cef()--*/
+  virtual void ExecuteJavaScriptTask(CefRefPtr<CefV8Task> jsTask) =0;
+
   // Returns true if this is the main frame.
   /*--cef()--*/
   virtual bool IsMain() =0;
Index: libcef/browser_impl.h
===================================================================
--- libcef/browser_impl.h	(revision 181)
+++ libcef/browser_impl.h	(working copy)
@@ -96,6 +96,8 @@
                          const CefString& jsCode, 
                          const CefString& scriptUrl,
                          int startLine);
+  void ExecuteJavaScriptTask(CefRefPtr<CefFrame> frame,
+                         CefRefPtr<CefV8Task> jsTask);
   CefString GetURL(CefRefPtr<CefFrame> frame);
 
   // CefFrames are light-weight objects managed by the browser and loosely
@@ -210,6 +212,8 @@
                              const CefString& js_code, 
                              const CefString& script_url,
                              int start_line);
+  void UIT_ExecuteJavaScriptTask(CefFrame* frame,
+                             CefV8Task* jsTask);
   void UIT_GoBackOrForward(int offset);
   void UIT_Reload(bool ignoreCache);
   bool UIT_Navigate(const BrowserNavigationEntry& entry,
@@ -345,6 +349,8 @@
                                  const CefString& scriptUrl,
                                  int startLine) 
     { return browser_->ExecuteJavaScript(this, jsCode, scriptUrl, startLine); }
+  virtual void ExecuteJavaScriptTask(CefRefPtr<CefV8Task> jsTask) 
+    { return browser_->ExecuteJavaScriptTask(this, jsTask); }
   virtual bool IsMain() { return name_.empty(); }
   virtual bool IsFocused();
   virtual CefString GetName() { return name_; }
Index: libcef/browser_impl.cc
===================================================================
--- libcef/browser_impl.cc	(revision 181)
+++ libcef/browser_impl.cc	(working copy)
@@ -9,6 +9,7 @@
 #include "browser_zoom_map.h"
 #include "request_impl.h"
 #include "stream_impl.h"
+#include "v8_impl.h"
 
 #include "base/file_path.h"
 #include "base/path_service.h"
@@ -403,6 +404,14 @@
       startLine));
 }
 
+void CefBrowserImpl::ExecuteJavaScriptTask(CefRefPtr<CefFrame> frame, CefRefPtr<CefV8Task> jsTask)
+{
+  frame->AddRef();
+  jsTask->AddRef();
+  CefThread::PostTask(CefThread::UI, FROM_HERE, NewRunnableMethod(this,
+      &CefBrowserImpl::UIT_ExecuteJavaScriptTask, frame.get(), jsTask.get()));
+}
+
 CefString CefBrowserImpl::GetURL(CefRefPtr<CefFrame> frame)
 {
   // Verify that this method is being called on the UI thread.
@@ -678,6 +687,33 @@
   }
 }
 
+void CefBrowserImpl::UIT_ExecuteJavaScriptTask(CefFrame* frame,
+                                           CefV8Task* jsTask)
+{
+  REQUIRE_UIT();
+
+  WebFrame* web_frame = UIT_GetWebFrame(frame);
+  v8::Handle<v8::Value> result;
+
+  if(web_frame) {
+    result = web_frame->executeScriptAndReturnValue(
+        WebScriptSource(string16(jsTask->GetScript()), 
+			WebURL(GURL(std::string(jsTask->GetScriptName()))), 
+		jsTask->GetStartLine()));
+  }
+
+  if(result.IsEmpty()) {
+    jsTask->HandleError();
+  }
+  else {
+    CefRefPtr<CefV8Value> cefResult = new CefV8ValueImpl(result);
+    jsTask->HandleSuccess(cefResult);
+  }
+
+  frame->Release();
+  jsTask->Release();
+}
+
 void CefBrowserImpl::UIT_GoBackOrForward(int offset)
 {
   REQUIRE_UIT();
Index: cef.gyp
===================================================================
--- cef.gyp	(revision 181)
+++ cef.gyp	(working copy)
@@ -330,6 +330,8 @@
         'libcef_dll/ctocpp/task_ctocpp.h',
         'libcef_dll/ctocpp/v8handler_ctocpp.cc',
         'libcef_dll/ctocpp/v8handler_ctocpp.h',
+        'libcef_dll/ctocpp/v8task_ctocpp.h',
+        'libcef_dll/ctocpp/v8task_ctocpp.cc',
         'libcef_dll/ctocpp/write_handler_ctocpp.cc',
         'libcef_dll/ctocpp/write_handler_ctocpp.h',
         'libcef_dll/libcef_dll.cc',
@@ -389,6 +391,8 @@
         'libcef_dll/cpptoc/scheme_handler_factory_cpptoc.h',
         'libcef_dll/cpptoc/v8handler_cpptoc.cc',
         'libcef_dll/cpptoc/v8handler_cpptoc.h',
+        'libcef_dll/cpptoc/v8task_cpptoc.h',
+        'libcef_dll/cpptoc/v8task_cpptoc.cc',
         'libcef_dll/cpptoc/write_handler_cpptoc.cc',
         'libcef_dll/cpptoc/write_handler_cpptoc.h',
         'libcef_dll/ctocpp/browser_ctocpp.cc',
